{"version":3,"file":"static/js/6.a7581709.chunk.js","mappings":"qSAOA,MAkEA,EAlEaA,KACX,MAAM,QAAEC,IAAYC,EAAAA,EAAAA,MAEbC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,OACpCC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IACpCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,MAoBnC,OAlBAK,EAAAA,EAAAA,YAAU,KACeC,WACrB,IACEJ,GAAa,GACb,MAAMK,QAAkBC,EAAAA,EAAAA,IAAgBZ,GACxC,GAA8B,IAA1BW,EAAUE,KAAKC,OACjB,MAAM,IAAIC,MAAM,yCAElBZ,EAAaQ,EACf,CAAE,MAAOJ,GACPC,EAASD,EACX,CAAC,QACCD,GAAa,EACf,GAEFU,EAAgB,GACf,CAAChB,KAGFiB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACGd,IACCe,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLC,OAAO,KACPC,MAAM,KACNC,MAAM,UACNC,UAAU,iBACVC,aAAc,CAAC,EACfC,aAAa,iBACbC,SAAS,MAIdrB,IAASa,EAAAA,EAAAA,KAAA,KAAAD,SAAIZ,EAAMsB,UACnB3B,IACCe,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAAK,IACFjB,EAAUW,KAAKiB,KAAIC,IAClBd,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAAsB,KACpBC,EAAAA,EAAAA,KAAA,OACEY,IACED,EAAQE,aAAY,kCAAAC,OACkBH,EAAQE,cAC1CE,EAENZ,MAAM,MACNa,IAAKL,EAAQM,QAEfjB,EAAAA,EAAAA,KAAA,MAAAD,SAAKY,EAAQM,QACbpB,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,eAAc,IAAEY,EAAQO,eAZrBP,EAAQQ,WAkBvB,C,sECrEP,MAGMC,EAAW,gCAEXC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cAAe,+NAINC,EAAepC,UAC1B,MAAMqC,QAAuBC,MAAM,GAADd,OAAIM,EAAQ,sBAAsBC,GACpE,aAAaM,EAAeE,MAAM,EAGvBC,EAAexC,UAC1B,MAAMyC,QAAoBH,MAAM,GAADd,OAC1BM,EAAQ,0CAAAN,OAAyCkB,GACpDX,GAEF,aAAaU,EAAYF,MAAM,EAGpBI,EAAkB3C,UAC7B,MAAM4C,QAA2BN,MAAM,GAADd,OAAIM,EAAQ,UAAAN,OAASlC,GAAWyC,GACtE,aAAaa,EAAmBL,MAAM,EAG3BrC,EAAkBF,UAC7B,MAAM6C,QAAqBP,MAAM,GAADd,OAC3BM,EAAQ,UAAAN,OAASlC,EAAO,YAC3ByC,GAEF,aAAac,EAAaN,MAAM,EAGrBO,EAAkB9C,UAC7B,MAAM+C,QAAqBT,MAAM,GAADd,OAC3BM,EAAQ,UAAAN,OAASlC,EAAO,YAC3ByC,GAEF,aAAagB,EAAaR,MAAM,C","sources":["components/Cast/Cast.jsx","components/services/themoviebd-api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { Blocks } from 'react-loader-spinner';\nimport { GetMovieCredits } from 'components/services/themoviebd-api';\nimport noImg from '../../images/1716bf8da8ff566983fca0387acc8d35.png';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [movieCast, setMovieCast] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null); // Изменено на null для начального состояния\n\n  useEffect(() => {\n    const fetchMovieCast = async () => {\n      try {\n        setIsLoading(true);\n        const fetchCast = await GetMovieCredits(movieId);\n        if (fetchCast.cast.length === 0) {\n          throw new Error(\"We don't have any cast for this movie\"); // Исправлено на строку в кавычках\n        }\n        setMovieCast(fetchCast);\n      } catch (error) {\n        setError(error); // Установка объекта ошибки\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovieCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && (\n        <h2>\n          <Blocks\n            height=\"80\"\n            width=\"80\"\n            color=\"#4fa94d\"\n            ariaLabel=\"blocks-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"blocks-wrapper\"\n            visible={true}\n          />\n        </h2>\n      )}\n      {error && <p>{error.message}</p>}\n      {movieCast && (\n        <div> {/* Обертка для списка актеров */}\n          {movieCast.cast.map(element => (\n            <div key={element.id}> {/* Добавлен уникальный key */}\n              <img\n                src={\n                  element.profile_path\n                    ? `https://image.tmdb.org/t/p/w500${element.profile_path}` // Исправлена интерполяция строки\n                    : noImg\n                }\n                width=\"100\"\n                alt={element.name}\n              />\n              <h3>{element.name}</h3>\n              <p>\n                <b>Character:</b> {element.character}\n              </p>\n            </div>\n          ))}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","const API_KEY_ACCESS =\n  'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIyZTE1MDIzZDViOWQ3ZWRjMWE4NDhhY2YxODc2YjQ0NSIsInN1YiI6IjY2MGU1N2E5NmRjNTA3MDE2NDU2NGYzOSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.7g5_S73d_kmCsOujpak_TASQ3OBWAJbyGG52uGpicY8';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization: 'Bearer ' + API_KEY_ACCESS,\n  },\n};\n\nexport const GetTrendings = async () => {\n  const fetchTrendings = await fetch(`${BASE_URL}trending/movie/day`, options);\n  return await fetchTrendings.json();\n};\n\nexport const SearchMovies = async query => {\n  const fetchMovies = await fetch(\n    `${BASE_URL}search/movie?include_adult=true&query=${query}`,\n    options\n  );\n  return await fetchMovies.json();\n};\n\nexport const GetMovieDetails = async movieId => {\n  const fetchMoviesDetails = await fetch(`${BASE_URL}movie/${movieId}`, options);\n  return await fetchMoviesDetails.json();\n};\n\nexport const GetMovieCredits = async movieId => {\n  const fetchCredits = await fetch(\n    `${BASE_URL}movie/${movieId}/credits`,\n    options\n  );\n  return await fetchCredits.json();\n};\n\nexport const GetMovieReviews = async movieId => {\n  const fetchReviews = await fetch(\n    `${BASE_URL}movie/${movieId}/reviews`,\n    options\n  );\n  return await fetchReviews.json();\n};\n"],"names":["Cast","movieId","useParams","movieCast","setMovieCast","useState","isLoading","setIsLoading","error","setError","useEffect","async","fetchCast","GetMovieCredits","cast","length","Error","fetchMovieCast","_jsxs","_Fragment","children","_jsx","Blocks","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","message","map","element","src","profile_path","concat","noImg","alt","name","character","id","BASE_URL","options","method","headers","accept","Authorization","GetTrendings","fetchTrendings","fetch","json","SearchMovies","fetchMovies","query","GetMovieDetails","fetchMoviesDetails","fetchCredits","GetMovieReviews","fetchReviews"],"sourceRoot":""}